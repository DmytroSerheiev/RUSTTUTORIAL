// ! Option <T> –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ

// ? –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Rust –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Option<T>–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è. Option<T>—à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ Rust. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.

// fn main() {
//     let num = vec!["1", "2", "3", "4", "5"];

//     let first = num.get(0);
//     println!("{:?}", first);

//     let third = num.get(2);
//     println!("{:?}", third);

//     let non_existent = num.get(99);
//     println!("{:?}", non_existent);

// ? match –í Rust –µ—Å—Ç—å –º–æ—â–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä match. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–º –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —à–∞–±–ª–æ–Ω—ã. –ü—Ä–∏ match–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º.

// for &index in [0, 2, 99].iter() {
//     match num.get(index) {
//         Some(&"3") => println!("2 are awesome!!!"),
//         Some(num_name) => println!("It's a delicious {}!", num_name),
//         None => println!("There is no fruit! üò•"),
//     }
// }
// ? –í—ã—Ä–∞–∂–µ–Ω–∏–µ if let Rust –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.

//     let a_number: Option<u8> = Some(7);
//     match a_number {
//         Some(7) => println!("That's my lucky number! "),
//         _ => {}
//     }
// }
//? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ unwrap –∏ expect –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ç–∏–ø–∞ Option–Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É—è unwrap–º–µ—Ç–æ–¥. –û–¥–Ω–∞–∫–æ –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–µ—Ç –ø–∞–Ω–∏–∫—É, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî None.

//     //unwrap
// let gift = Some("candy");
// assert_eq!(gift.unwrap(), "candy");

// let empty_gift: Option<&str> = None;
// assert_eq!(empty_gift.unwrap(), "candy"); // This will panic!

//    //expect
// let a = Some("value");
// assert_eq!(a.expect("fruits are healthy"), "value");

// let b: Option<&str> = None;
// b.expect("fruits are healthy"); // panics with `fruits are healthy`
// // ? –º–µ—Ç–æ–¥ –∫–æ—Ç–æ–∏–π –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–∞–Ω–∏–∫–µ
// assert_eq!(Some("dog").unwrap_or("cat"), "dog");
// assert_eq!(None.unwrap_or("cat"), "cat");

//! –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ ¬´Option¬ª –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
// struct Person {
//     first: String,
//     middle: Option<String>,
//     last: String,
// }

// fn build_full_name(person: &Person) -> String {
//     let mut full_name = String::new();
//     full_name.push_str(&person.first);
//     full_name.push_str(" ");

//     // TODO: Implement the part of this function that handles the person's middle name.

//     if let Some(middle_name) = &person.middle {
//         full_name.push_str(middle_name);
//         full_name.push_str(" ");
//     }

//     full_name.push_str(&person.last);
//     full_name
// }

// fn main() {
//     let john = Person {
//         first: String::from("James"),
//         middle: Some(String::from("Oliver")),
//         last: String::from("Smith"),
//     };
//     assert_eq!(build_full_name(&john), "James Oliver Smith");

//     let alice = Person {
//         first: String::from("Alice"),
//         middle: None,
//         last: String::from("Stevens"),
//     };
//     assert_eq!(build_full_name(&alice), "Alice Stevens");

//     let bob = Person {
//         first: String::from("Robert"),
//         middle: Some(String::from("Murdock")),
//         last: String::from("Jones"),
//     };
//     assert_eq!(build_full_name(&bob), "Robert Murdock Jones");
// }
//    ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (Result —Ç–∏–ø)
// ? –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç Option—Ç–∏–ø–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏—è , Result—Ç–∏–ø –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–º, –≥–¥–µ –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–±–æ–∏ .
// enum Result<T, E> {
//     Ok(T):  // A value T was obtained.
//     Err(E): // An error of type E was encountered instead.
// }
// //=========================================

// #[derive(Debug)]
// struct DivisionByZeroError;

// fn safe_division(dividend: f64, divisor: f64) -> Result<f64, DivisionByZeroError> {
//     if divisor == 0.0 {
//         Err(DivisionByZeroError)
//     } else {
//         Ok(dividend / divisor)
//     }
// }

// fn main() {
//     println!("{:?}", safe_division(9.0, 3.0));
//     println!("{:?}", safe_division(4.0, 0.0));
//     println!("{:?}", safe_division(0.0, 2.0));
// }
//! –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ Result –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
//! use std::fs::File;
use std::fs::File;
use std::io::{Error, Read};
use std::path::PathBuf;

fn read_file_contents(path: PathBuf) -> Result<String, Error> {
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let mut string = String::new();

    // –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
    // ---------------------------------
    // TODO #1:
    // - –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `file` –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–ª–∏
    // - –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä (handle) —Å –ø–æ–º–æ—â—å—é File::open –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π file
    let mut file: File = match File::open(&path) {
        Ok(file_handle) => file_handle,
        Err(io_error) => return Err(io_error),
    };

    // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `String` —Å –ø–æ–º–æ—â—å—é `read_to_string`
    // ---------------------------------
    // –ü—É—Ç—å —É—Å–ø–µ—Ö–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
    // TODO #2: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file.read_to_string –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π string
    match file.read_to_string(&mut string) {
        Ok(_) => (),
        Err(io_error) => return Err(io_error),
    };

    // TODO #3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `string` –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ Ok
    Ok(string)
}

fn main() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å–ø–µ—à–Ω–æ –ª–∏ —Å—á–∏—Ç–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ "src/main.rs"
    if let Ok(_) = read_file_contents(PathBuf::from("src/main.rs")) {
        println!("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—à–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª.");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ–∑–Ω–∏–∫–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ "non-existent-file.txt"
    if let Err(_) = read_file_contents(PathBuf::from("non-existent-file.txt")) {
        println!("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–æ–±—â–∏–ª–∞ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
    }
}
